meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: hashicorp/terraform
            tag: ((dataworks.terraform_version))
      params:
        TF_INPUT: false
        TF_CLI_ARGS_apply: -lock-timeout=300s
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_VAR_slack_webhook_url: ((dataworks.slack_webhook_url))
        TF_VAR_costcode: ((dataworks.costcode))

    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              cp terraform/deploy/$DEPLOY_PATH/terraform.tf ../terraform-config
              cp terraform/deploy/$DEPLOY_PATH/terraform.tfvars ../terraform-config
          dir: dataworks-analytical-frontend-service
        inputs:
          - name: dataworks-analytical-frontend-service
        outputs:
          - name: terraform-config
      params:
        AWS_REGION: eu-west-2

    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
          - -exc
          - |
            cp ../../../../terraform-config/terraform.tf .
            cp ../../../../terraform-config/terraform.tfvars .
            terraform init
            terraform workspace show
            terraform plan -var assume_role=ci -out terraform.plan
            terraform apply -auto-approve terraform.plan
        inputs:
          - name: dataworks-analytical-frontend-service
          - name: terraform-config

    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
          - -exc
          - |
            cp ../../../../terraform-config/terraform.tf .
            cp ../../../../terraform-config/terraform.tfvars .
            terraform init
            terraform workspace show
            terraform plan -var assume_role=ci -detailed-exitcode
        inputs:
        - name: dataworks-analytical-frontend-service
        - name: terraform-config

    terraform-output:
      task: terraform-output
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          dir: dataworks-analytical-frontend-service/terraform/deploy/app
          args:
          - -exc
          - |
            cp ../../../../terraform-config/terraform.tf .
            cp ../../../../terraform-config/terraform.tfvars .
            terraform init
            terraform workspace show
            terraform output -json > ../../../../terraform-output/outputs.json
        inputs:
        - name: dataworks-analytical-frontend-service
        - name: terraform-config
        outputs:
        - name: terraform-output

    create-aws-profiles:
      task: create-aws-profiles
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        outputs:
          - name: .aws
        params:
          AWS_PROFILE: ci
          AWS_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
          - -exc
          - |
            cat <<EOF> .aws/config
            [default]
            region = ${AWS_REGION}
            role_arn = arn:aws:iam::${AWS_ACC}:role/ci
            credential_source = Ec2InstanceMetadata
            s3 =
              max_concurrent_requests = 5
              signature_version = s3v4
              addressing_style = virtual
            EOF

    set-cognito-client-options:
      task: set-cognito-client-options
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        inputs:
          - name: .aws
          - name: terraform-output
        params:
          ID_TOKEN_VALIDITY_TIME_HOURS: 12
          ACCESS_TOKEN_VALIDITY_TIME_HOURS: 1
          REFRESH_TOKEN_VALIDITY_TIME_DAYS: 1
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_CONFIG_FILE=$PWD/.aws/config

              export USER_POOL_ID=$(jq -r .app_client.value.user_pool_id < terraform-output/outputs.json)
              export APP_CLIENT_ID=$(jq -r .app_client.value.id < terraform-output/outputs.json)
              aws cognito-idp update-user-pool-client --user-pool-id ${USER_POOL_ID} --client-id ${APP_CLIENT_ID} \
                --id-token-validity ${ID_TOKEN_VALIDITY_TIME_HOURS} --access-token-validity ${ACCESS_TOKEN_VALIDITY_TIME_HOURS} --refresh-token-validity ${REFRESH_TOKEN_VALIDITY_TIME_DAYS} \
                --token-validity-units AccessToken=hours,IdToken=hours,RefreshToken=days
