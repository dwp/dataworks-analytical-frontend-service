meta:
  plan:
    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.5
            tag: 0.0.5
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              cp terraform/deploy/$DEPLOY_PATH/terraform.tf ../terraform-config
              cp terraform/deploy/$DEPLOY_PATH/terraform.tfvars ../terraform-config
          dir: dataworks-analytical-frontend-service
        inputs:
          - name: dataworks-analytical-frontend-service
        outputs:
          - name: terraform-config
      params:
        AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
        AWS_REGION: eu-west-2
    terraform-apply:
      task: terraform-apply
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((terraform.repository))
            version: ((terraform12.version))
            tag: ((terraform12.version))
        params:
          AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
          TF_INPUT: false
          TF_VAR_assume_role: ci
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan:  -lock-timeout=300s
        run:
          path: sh
          args:
          - -exc
          - |
            cp ../../../../terraform-config/terraform.tf .
            cp ../../../../terraform-config/terraform.tfvars .
            terraform init
            terraform workspace show
            terraform plan -var assume_role=ci -out terraform.plan
            terraform apply -auto-approve terraform.plan
        inputs:
        - name: dataworks-analytical-frontend-service
        - name: terraform-config
    terraform-plan:
      task: terraform-plan
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((terraform.repository))
            version: ((terraform12.version))
            tag: ((terraform12.version))
        params:
          AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan:  -lock-timeout=300s
        run:
          path: sh
          args:
          - -exc
          - |
            cp ../../../../terraform-config/terraform.tf .
            cp ../../../../terraform-config/terraform.tfvars .
            terraform init
            terraform workspace show
            terraform plan -var assume_role=ci -detailed-exitcode
        inputs:
        - name: dataworks-analytical-frontend-service
        - name: terraform-config
    terraform-output:
      task: terraform-output
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((terraform.repository))
            version: ((terraform12.version))
            tag: ((terraform12.version))
        params:
          AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
        run:
          path: sh
          dir: analytical-frontend-service/terraform/deploy
          args:
          - -exc
          - |
            cp ../../../terraform-config/terraform.tf .
            cp ../../../terraform-config/terraform.tfvars .
            terraform init
            terraform workspace show
            terraform output -json > ../../../terraform-output/outputs.json
        inputs:
        - name: dataworks-analytical-frontend-service
        - name: terraform-config
        outputs:
        - name: terraform-output
    create-aws-profiles:
      task: create-aws-profiles
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli.repository))
            version: ((docker-awscli.version))
            tag: ((docker-awscli.version))
        outputs:
          - name: .aws
        params:
          AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
          AWS_PROFILE: ci
        run:
          path: sh
          args:
          - -exc
          - |
            cat <<EOF> .aws/credentials
            [default]
            aws_access_key_id = $AWS_ACCESS_KEY_ID
            aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
            [${AWS_PROFILE}]
            role_arn = arn:aws:iam::${AWS_ACC}:role/${AWS_PROFILE}
            source_profile = default
            EOF
            cat <<EOF> .aws/config
            [default]
            region = eu-west-2
            [profile ${AWS_PROFILE}]
            region = eu-west-2
            s3 =
              max_concurrent_requests = 5
              signature_version = s3v4
              addressing_style = virtual
            EOF     
    npm-install:
      task: npm-install
      config: 
        platform: linux
        image_resource:
          type: docker-image
            source:
              repository: ((terraform.repository))
              version: ((terraform12.version))
              tag: ((terraform12.version))
                path: sh
                args: 
                - -exc
                - |
                cd terraform/modules/custom-auth-flow/createAuthChallenge
                npm ci
                npm run build --if-present
                npm test
                cd ../defineAuthChallenge
                npm ci
                npm run build --if-present
                npm test
                cd ../verifyAuthChallenge
                npm ci
                npm run build --if-present
                npm test

