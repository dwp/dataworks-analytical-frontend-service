terraform {
  required_version = "{{terraform.terraform_version}}"

  backend "s3" {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/analytical-frontend-service.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{terraform.state_file_region}}:{{terraform.state_file_account}}:key/{{terraform.state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }

  required_providers {
    aws = {
      version = "~> 4.53"
    }
  }
}

data "terraform_remote_state" "aws_analytical_env_cognito" {
  backend = "s3"
  workspace = local.management_workspace[local.management_account[local.environment]]

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/aws-analytical-environment_cognito.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{terraform.state_file_region}}:{{terraform.state_file_account}}:key/{{terraform.state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "aws_analytical_env_infra" {
  backend = "s3"
  workspace = terraform.workspace

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/aws-analytical-environment_infra.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{terraform.state_file_region}}:{{terraform.state_file_account}}:key/{{terraform.state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "orchestration-service" {
  backend = "s3"
  workspace = terraform.workspace

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/orchestration-service.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{terraform.state_file_region}}:{{terraform.state_file_account}}:key/{{terraform.state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

provider "aws" {
  region = "{{terraform.provider_region}}"
  default_tags {
    tags = merge(
      local.common_tags,
      {
      Application      = "DataWorks"                              # As per our definition on ServiceNow
      Function         = "Data and Analytics"                     # As per our definition on ServiceNow
      Environment      = local.hcs_environment[local.environment] # Set up locals as per Tagging doc requirements https://engineering.dwp.gov.uk/policies/hcs-cloud-hosting-policies/resource-identification-tagging/
      Business-Project = "PRJ0022507"                             # This seems to replace costcode as per the doc https://engineering.dwp.gov.uk/policies/hcs-cloud-hosting-policies/resource-identification-tagging/
    },
    )
  }

  assume_role {
    role_arn = "arn:aws:iam::${lookup(local.account, local.environment)}:role/${var.assume_role}"
  }
}

provider "aws" {
  region  = "{{terraform.provider_region}}"
  alias   = "management_dns"
  default_tags {
    tags = merge(
      local.common_tags,
      {
      Application      = "DataWorks"                              # As per our definition on ServiceNow
      Function         = "Data and Analytics"                     # As per our definition on ServiceNow
      Environment      = local.hcs_environment[local.environment] # Set up locals as per Tagging doc requirements https://engineering.dwp.gov.uk/policies/hcs-cloud-hosting-policies/resource-identification-tagging/
      Business-Project = "PRJ0022507"                             # This seems to replace costcode as per the doc https://engineering.dwp.gov.uk/policies/hcs-cloud-hosting-policies/resource-identification-tagging/
    },
    )
  }

  assume_role {
    role_arn = "arn:aws:iam::${local.account["management"]}:role/${var.assume_role}"
  }
}


locals {
  name = "analytical-frontend-service"
  environment = terraform.workspace == "default" ? "development" : terraform.workspace
  container_image = "${local.account[local.management_account[local.environment]]}.dkr.ecr.${var.region}.amazonaws.com/aws-analytical-env/analytical-frontend-service"

  root_dns_prefix = {
    development = "dev"
    qa          = "qa"
    integration = "int"
    preprod     = "pre"
    production  = "" # no prefix in prod
  }

  parent_domain_name = {
    development = "wip.{{dataworks_domain_name}}"
    qa          = "wip.{{dataworks_domain_name}}"
    integration = "wip.{{dataworks_domain_name}}"
    preprod     = "{{dataworks_domain_name}}"
    production  = "{{dataworks_domain_name}}"
  }

  account = {
    {% for key, value in accounts.items() %}
      {{key}} = "{{value}}"
    {% endfor %}
  }

  management_account = {
    development = "management-dev"
    qa          = "management-dev"
    integration = "management-dev"
    preprod     = "management"
    production  = "management"
  }


  management_workspace = {
    management-dev = "default"
    management     = "management"
  }

  whitelist_cidr_blocks = [
    {% set doiranges = doi["cidr_blocks"].split(',') %}
    {% for cidr in doiranges %}
    "{{ cidr }}",
    {% endfor %} 
    "{{ucfs["team_cidr_block"]}}"
  ]

  common_tags = {
    {% for key, value in common_tags.items() %}
      {{key}} = "{{value}}"
    {% endfor %}
    Name             = local.name
    DWX_Environment  = local.environment
    DWX_Application  = local.name
    Persistence      = "True"
    AutoShutdown     = "False"
    Costcode         = var.costcode
  }
}
