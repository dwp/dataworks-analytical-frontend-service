name: Master

on:
  push:
    branches:
      - master

env:
  IMAGE_NAME: dwpdigital/analytical-frontend-service

jobs:
  get-publish-version:
    runs-on: ubuntu-latest
    outputs:
      publish-version: ${{ steps.get-publish-version.outputs.publish-version }}
    steps:
    - name: Get publish version
      id: get-publish-version
      run: |
        LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
        VERSION=$(echo $LATEST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
        echo "::set-output name=publish-version::${VERSION}"
  
  publish-github-release:
    runs-on: ubuntu-latest
    needs: get-publish-version
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Use Node.js
        uses: actions/setup-node@v1
      - name: Install dependencies
      - run: npm install
      - run: npm run build
      - run: npm test
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.get-publish-version.outputs.publish-version }}
          release_name: Release ${{ needs.get-publish-version.outputs.publish-version }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pacts/frontendservice-orchestrationservice.json
          asset_name: frontendservice-orchestrationservice.json
          asset_content_type: application/json

  publish-docker:
    runs-on: ubuntu-latest
    needs: get-publish-version
    steps:
    - uses: actions/checkout@master
    - name: Publish to DockerHub
      uses: elgohr/Publish-Docker-Github-Action@master
      with:
        name: ${{ env.IMAGE_NAME }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        tags: "latest, ${{ needs.get-publish-version.outputs.publish-version }}"
        tag_semver: true

  snyk-monitor:
    runs-on: ubuntu-latest
    needs: publish-docker
    steps:
      - uses: actions/checkout@v2
      - name: Run Snyk monitoring
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          image: ${{ env.IMAGE_NAME }}
          args: --file=Dockerfile --org=dwp-dataworks
